1)

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <ctime>
#include <string>
 
using namespace std;
 
 
int main() {
 
	time_t now = time(0); 
 
	string date_bd;
	cin >> date_bd; // format is dd.mm.yyyy
	int day = stoi(date_bd.substr(0, 2)), month = stoi(date_bd.substr(3, 4)), year = stoi(date_bd.substr(6, 9));
 
	struct tm timeinfo = { 0 };
	timeinfo.tm_year = year - 1900;         
	timeinfo.tm_mon = month - 1;           
	timeinfo.tm_mday = day;                   
 
	time_t btime = mktime(&timeinfo);
 
	int now_days = now / 86400;
	int btime_days = btime / 86400;
 
	cout << "Your age in days is: " << now_days - btime_days;
	system("pause");
	return 0;
 
}


2)

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <ctime>
#include <string>
 
using namespace std;
 
double calculator(double a, double b, char oper) {
	switch (oper) {
	case('+'):
		return a + b;
	case('-'):
		return a - b;
	case('*'):
		return a * b;
	case('/'):
		double result;
		try {
			if (b == 0) {
				throw runtime_error("divide by Zero");
			}
			else {
				result = a / b;
			}
			return result;
		}
		catch (runtime_error& ex) {
			cout << "Exception occurred: " << endl << ex.what();
			return -1;
		}
	default:
		cout << "Operation didn't find";
		return -1;
	}
}
 
 
int main() {
	double a, b;
	char operation;
	cin.exceptions(cin.failbit);
	try {
		cout << "enter a";
		cin >> a;
	}
	catch (const exception& ex)
	{
		cout << "Error: Incorrect digit!" << endl;
		cin.clear();
		cin.ignore(10, '\n');
		return 0;
	}
	try {
		cout << "enter b";
		cin >> b;
	}
	catch (const exception& ex)
	{
		cout << "Error: Incorrect digit!" << endl;
		cout << ex.what() << endl;
		cin.clear();
		cin.ignore(10, '\n');
		return 0;
	}
	try {
		cout << "Enter operation";
		cin >> operation;
	}
	catch (const exception& ex)
	{
		cout << "Error: Incorrect digit" << endl;
		cout << ex.what() << endl;
		cin.clear();
		cin.ignore(10, '\n');
		return 0;
	}
 
	cout << endl <<"Result is: " << calculator(a, b, operation);
 
}


3)

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <ctime>
#include <string>
#include <vector>
#include <climits>
 
using namespace std;
 
const int arr_size = 5;
 
void selection_sort(int arr[], const int size) {
	for (int i = 0; i < size; i++) {
		int arr_min = INT_MAX;
		int index_min=0;
		for (int j = i; j < size; j++) {
			if (arr[j] < arr_min) {
				arr_min = arr[j];
				index_min = j;
			}
		}
		swap(arr[i], arr[index_min]);
	}
	return;
}
 
void bubble_sort(int arr[], const int size) {
	for (int i = 0; i < size; i++) {
		for (int j = 0; j < size - 1; j++) {
			if (arr[j] > arr[j + 1]) {
				swap(arr[j], arr[j + 1]);
			}
		}
	}
	return;
}
 
void insertion_sort(int arr[], const int size) {
 
	for (int i = 1; i < size; i++) {
		int x = arr[i];
		int j = i;
		while (j > 0 && arr[j - 1] > x) {
			arr[j] = arr[j - 1];
			j = j - 1;
		}
		arr[j] = x;
	}
 
 
	return;
}
 
int main(){
 
	int arr[arr_size] = { 4,2,5,3,1 };
	insertion_sort(arr, arr_size);
	for (int i = 0; i < arr_size; i++) {
		cout << arr[i] << ' ';
	}
	return 0;
}